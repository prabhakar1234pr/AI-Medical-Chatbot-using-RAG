{"ast":null,"code":"var _jsxFileName = \"C:\\\\medical-chatbot-backend\\\\medical-chatbot-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChatBox from './components/ChatBox';\nimport MessageInput from './components/MessageInput';\nimport axios from 'axios';\n\n// API URL - change this to your backend URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:8000';\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const [availableTools, setAvailableTools] = useState([]);\n\n  // Initialize or retrieve session ID\n  useEffect(() => {\n    // Check if a session ID is stored in localStorage\n    const storedSessionId = localStorage.getItem('chat_session_id');\n    if (storedSessionId) {\n      setSessionId(storedSessionId);\n    }\n\n    // Fetch available tools\n    fetchAvailableTools();\n  }, []);\n\n  // Fetch the available tools from the API\n  const fetchAvailableTools = async () => {\n    try {\n      const response = await axios.get(`${API_URL}/tools`);\n      setAvailableTools(response.data.tools);\n    } catch (error) {\n      console.error('Error fetching available tools:', error);\n    }\n  };\n  const sendMessage = async message => {\n    if (!message.trim()) return;\n\n    // Add user message to chat\n    const userMessage = {\n      text: message,\n      sender: 'user'\n    };\n    setMessages([...messages, userMessage]);\n\n    // Set loading state\n    setIsLoading(true);\n    try {\n      // Make actual API call\n      const response = await axios.post(`${API_URL}/chat`, {\n        user_input: message,\n        session_id: sessionId\n      });\n\n      // Store the session ID for future messages\n      if (response.data.session_id) {\n        setSessionId(response.data.session_id);\n        localStorage.setItem('chat_session_id', response.data.session_id);\n      }\n\n      // Add bot response to messages\n      setMessages(prevMessages => [...prevMessages, {\n        text: response.data.response,\n        sender: 'bot'\n      }]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"Sorry, there was an error processing your request.\",\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to clear the chat session\n  const clearSession = async () => {\n    if (sessionId) {\n      try {\n        await axios.delete(`${API_URL}/sessions/${sessionId}`);\n        localStorage.removeItem('chat_session_id');\n        setSessionId(null);\n        setMessages([]);\n      } catch (error) {\n        console.error('Error clearing session:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Medical Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearSession,\n          className: \"clear-button\",\n          children: \"New Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(ChatBox, {\n          messages: messages,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n          onSendMessage: sendMessage,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bSKjqXCRoY2R3XJDewfUutDTY/A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatBox","MessageInput","axios","jsxDEV","_jsxDEV","API_URL","App","_s","messages","setMessages","isLoading","setIsLoading","sessionId","setSessionId","availableTools","setAvailableTools","storedSessionId","localStorage","getItem","fetchAvailableTools","response","get","data","tools","error","console","sendMessage","message","trim","userMessage","text","sender","post","user_input","session_id","setItem","prevMessages","clearSession","delete","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSendMessage","disabled","_c","$RefreshReg$"],"sources":["C:/medical-chatbot-backend/medical-chatbot-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ChatBox from './components/ChatBox';\r\nimport MessageInput from './components/MessageInput';\r\nimport axios from 'axios';\r\n\r\n// API URL - change this to your backend URL\r\nconst API_URL = 'http://localhost:8000';\r\n\r\nfunction App() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [sessionId, setSessionId] = useState(null);\r\n  const [availableTools, setAvailableTools] = useState([]);\r\n  \r\n  // Initialize or retrieve session ID\r\n  useEffect(() => {\r\n    // Check if a session ID is stored in localStorage\r\n    const storedSessionId = localStorage.getItem('chat_session_id');\r\n    if (storedSessionId) {\r\n      setSessionId(storedSessionId);\r\n    }\r\n    \r\n    // Fetch available tools\r\n    fetchAvailableTools();\r\n  }, []);\r\n  \r\n  // Fetch the available tools from the API\r\n  const fetchAvailableTools = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/tools`);\r\n      setAvailableTools(response.data.tools);\r\n    } catch (error) {\r\n      console.error('Error fetching available tools:', error);\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (message) => {\r\n    if (!message.trim()) return;\r\n    \r\n    // Add user message to chat\r\n    const userMessage = { text: message, sender: 'user' };\r\n    setMessages([...messages, userMessage]);\r\n    \r\n    // Set loading state\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Make actual API call\r\n      const response = await axios.post(`${API_URL}/chat`, { \r\n        user_input: message,\r\n        session_id: sessionId\r\n      });\r\n      \r\n      // Store the session ID for future messages\r\n      if (response.data.session_id) {\r\n        setSessionId(response.data.session_id);\r\n        localStorage.setItem('chat_session_id', response.data.session_id);\r\n      }\r\n      \r\n      // Add bot response to messages\r\n      setMessages(prevMessages => [\r\n        ...prevMessages, \r\n        { text: response.data.response, sender: 'bot' }\r\n      ]);\r\n      \r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      setMessages(prevMessages => [\r\n        ...prevMessages, \r\n        { text: \"Sorry, there was an error processing your request.\", sender: 'bot' }\r\n      ]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to clear the chat session\r\n  const clearSession = async () => {\r\n    if (sessionId) {\r\n      try {\r\n        await axios.delete(`${API_URL}/sessions/${sessionId}`);\r\n        localStorage.removeItem('chat_session_id');\r\n        setSessionId(null);\r\n        setMessages([]);\r\n      } catch (error) {\r\n        console.error('Error clearing session:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Medical Chatbot</h1>\r\n        <div className=\"header-actions\">\r\n          <button onClick={clearSession} className=\"clear-button\">\r\n            New Conversation\r\n          </button>\r\n        </div>\r\n      </header>\r\n      <main>\r\n        <div className=\"chat-container\">\r\n          <ChatBox messages={messages} isLoading={isLoading} />\r\n          <MessageInput onSendMessage={sendMessage} disabled={isLoading} />\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}