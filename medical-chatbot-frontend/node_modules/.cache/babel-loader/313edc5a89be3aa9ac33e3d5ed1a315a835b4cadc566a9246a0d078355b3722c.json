{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./App.css';import ChatBox from'./components/ChatBox';import MessageInput from'./components/MessageInput';import axios from'axios';// API URL - change this to your backend URL\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_URL='http://localhost:8000';function App(){const[messages,setMessages]=useState([]);const[isLoading,setIsLoading]=useState(false);const[sessionId,setSessionId]=useState(null);const[availableTools,setAvailableTools]=useState([]);// Initialize or retrieve session ID\nuseEffect(()=>{// Check if a session ID is stored in localStorage\nconst storedSessionId=localStorage.getItem('chat_session_id');if(storedSessionId){setSessionId(storedSessionId);}// Fetch available tools\nfetchAvailableTools();},[]);// Fetch the available tools from the API\nconst fetchAvailableTools=async()=>{try{const response=await axios.get(\"\".concat(API_URL,\"/tools\"));setAvailableTools(response.data.tools);}catch(error){console.error('Error fetching available tools:',error);}};const sendMessage=async message=>{if(!message.trim())return;// Add user message to chat\nconst userMessage={text:message,sender:'user'};setMessages([...messages,userMessage]);// Set loading state\nsetIsLoading(true);try{// Make actual API call\nconst response=await axios.post(\"\".concat(API_URL,\"/chat\"),{user_input:message,session_id:sessionId});// Store the session ID for future messages\nif(response.data.session_id){setSessionId(response.data.session_id);localStorage.setItem('chat_session_id',response.data.session_id);}// Add bot response to messages\nsetMessages(prevMessages=>[...prevMessages,{text:response.data.response,sender:'bot'}]);}catch(error){console.error('Error sending message:',error);setMessages(prevMessages=>[...prevMessages,{text:\"Sorry, there was an error processing your request.\",sender:'bot'}]);}finally{setIsLoading(false);}};// Function to clear the chat session\nconst clearSession=async()=>{if(sessionId){try{await axios.delete(\"\".concat(API_URL,\"/sessions/\").concat(sessionId));localStorage.removeItem('chat_session_id');setSessionId(null);setMessages([]);}catch(error){console.error('Error clearing session:',error);}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Medical Chatbot\"}),/*#__PURE__*/_jsx(\"div\",{className:\"header-actions\",children:/*#__PURE__*/_jsx(\"button\",{onClick:clearSession,className:\"clear-button\",children:\"New Conversation\"})})]}),/*#__PURE__*/_jsx(\"main\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(ChatBox,{messages:messages,isLoading:isLoading}),/*#__PURE__*/_jsx(MessageInput,{onSendMessage:sendMessage,disabled:isLoading})]})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","ChatBox","MessageInput","axios","jsx","_jsx","jsxs","_jsxs","API_URL","App","messages","setMessages","isLoading","setIsLoading","sessionId","setSessionId","availableTools","setAvailableTools","storedSessionId","localStorage","getItem","fetchAvailableTools","response","get","concat","data","tools","error","console","sendMessage","message","trim","userMessage","text","sender","post","user_input","session_id","setItem","prevMessages","clearSession","delete","removeItem","className","children","onClick","onSendMessage","disabled"],"sources":["C:/medical-chatbot-backend/medical-chatbot-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ChatBox from './components/ChatBox';\r\nimport MessageInput from './components/MessageInput';\r\nimport axios from 'axios';\r\n\r\n// API URL - change this to your backend URL\r\nconst API_URL = 'http://localhost:8000';\r\n\r\nfunction App() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [sessionId, setSessionId] = useState(null);\r\n  const [availableTools, setAvailableTools] = useState([]);\r\n  \r\n  // Initialize or retrieve session ID\r\n  useEffect(() => {\r\n    // Check if a session ID is stored in localStorage\r\n    const storedSessionId = localStorage.getItem('chat_session_id');\r\n    if (storedSessionId) {\r\n      setSessionId(storedSessionId);\r\n    }\r\n    \r\n    // Fetch available tools\r\n    fetchAvailableTools();\r\n  }, []);\r\n  \r\n  // Fetch the available tools from the API\r\n  const fetchAvailableTools = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/tools`);\r\n      setAvailableTools(response.data.tools);\r\n    } catch (error) {\r\n      console.error('Error fetching available tools:', error);\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (message) => {\r\n    if (!message.trim()) return;\r\n    \r\n    // Add user message to chat\r\n    const userMessage = { text: message, sender: 'user' };\r\n    setMessages([...messages, userMessage]);\r\n    \r\n    // Set loading state\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Make actual API call\r\n      const response = await axios.post(`${API_URL}/chat`, { \r\n        user_input: message,\r\n        session_id: sessionId\r\n      });\r\n      \r\n      // Store the session ID for future messages\r\n      if (response.data.session_id) {\r\n        setSessionId(response.data.session_id);\r\n        localStorage.setItem('chat_session_id', response.data.session_id);\r\n      }\r\n      \r\n      // Add bot response to messages\r\n      setMessages(prevMessages => [\r\n        ...prevMessages, \r\n        { text: response.data.response, sender: 'bot' }\r\n      ]);\r\n      \r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      setMessages(prevMessages => [\r\n        ...prevMessages, \r\n        { text: \"Sorry, there was an error processing your request.\", sender: 'bot' }\r\n      ]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to clear the chat session\r\n  const clearSession = async () => {\r\n    if (sessionId) {\r\n      try {\r\n        await axios.delete(`${API_URL}/sessions/${sessionId}`);\r\n        localStorage.removeItem('chat_session_id');\r\n        setSessionId(null);\r\n        setMessages([]);\r\n      } catch (error) {\r\n        console.error('Error clearing session:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Medical Chatbot</h1>\r\n        <div className=\"header-actions\">\r\n          <button onClick={clearSession} className=\"clear-button\">\r\n            New Conversation\r\n          </button>\r\n        </div>\r\n      </header>\r\n      <main>\r\n        <div className=\"chat-container\">\r\n          <ChatBox messages={messages} isLoading={isLoading} />\r\n          <MessageInput onSendMessage={sendMessage} disabled={isLoading} />\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}